1. How do we decrypt using the Caesar cipher?

enChar = char MINUS key;

decryption = encryption with decKey = 26 - encKey


2. If the key to a Caesar cipher is a string, what do u mean by "XOR" the bits? Does this yield an int?

if key = "Owen", encKey = 'o' ^ 'w' ^ 'e' ^ 'n';

k = 0
Write a loop with code k ^= s[c]

3. How can I get my "main.c" to recognize that "caesar.h" exists?

gcc main.c caesar.c

4. Where is the implementation for "strings.h"? Is there a "strlen()" definition?

Check the PDF

5. What is the purpose of "strings.h" class? Are we supposed to make all text that's encrypted/decrypted a "string" structure?

Supposed to wrap up all the ciphers in a neat bundle, SHOULD BE USED.

6. Can we just do "char *name = "Owen"? Or do we have to malloc with char pointers?

Yea that's cool, any pointer can be indexed through.
__________________________________________________________________________________________________________________________________________

WHERE TO START:

Caesar Encryption:

3 subsets:

1. a-z
2. A-Z
3. ! - ;

MUST wrap-around! 

	* create if statement for each subsets, then check if adding the key goes over "z/Z/;"

Only characters in these sets can be encrypted
Thus, spaces and such do NOT get encrypted!

_____________________________________________________________________________________________________________________________________________

AES (See page 16 in "CProjectCipher.pdf")

Static functions (like in "aes_cbc.c") can be called ONLY WITHIN the .c file

We create our own initialization vector "uint8_tiv[]"

isprint() checks is something is a printable byte

First loop prints everything in buffer, second loop prints the actual characters of the encrypted buffer
